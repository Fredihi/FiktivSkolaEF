// <auto-generated />
using System;
using FiktivSkolaEF.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FiktivSkolaEF.Migrations
{
    [DbContext(typeof(FiktivSkolaDbContext))]
    partial class FiktivSkolaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FiktivSkolaEF.Models.ConnectionTable", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int?>("DateGradeId")
                        .HasColumnType("int")
                        .HasColumnName("DateGradeID");

                    b.Property<int>("GradeId")
                        .HasColumnType("int")
                        .HasColumnName("GradeID");

                    b.Property<int>("StaffId")
                        .HasColumnType("int")
                        .HasColumnName("StaffID");

                    b.Property<int>("StaffPositionId")
                        .HasColumnType("int")
                        .HasColumnName("StaffPositionID");

                    b.Property<int>("StudentId")
                        .HasColumnType("int")
                        .HasColumnName("StudentID");

                    b.HasKey("Id");

                    b.HasIndex("DateGradeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("StaffId");

                    b.HasIndex("StaffPositionId");

                    b.HasIndex("StudentId");

                    b.ToTable("ConnectionTable", (string)null);
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.DateGrade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<DateTime>("GradeDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("DateGrade", (string)null);
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.Grade", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Grade1")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .HasColumnName("Grade")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.staff", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FName");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LName");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("PositionID");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("Staff", (string)null);
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.StaffPosition", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("StaffPosition1")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("StaffPosition");

                    b.HasKey("Id");

                    b.ToTable("StaffPosition", (string)null);
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.Student", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<string>("Class")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Fname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FName");

                    b.Property<string>("Gender")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Lname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LName");

                    b.Property<int>("PersonalNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.ConnectionTable", b =>
                {
                    b.HasOne("FiktivSkolaEF.Models.DateGrade", "DateGrade")
                        .WithMany("ConnectionTables")
                        .HasForeignKey("DateGradeId")
                        .HasConstraintName("FK_ConnectionTable_DateGrade");

                    b.HasOne("FiktivSkolaEF.Models.Grade", "Grade")
                        .WithMany("ConnectionTables")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_ConnectionTable_Grades");

                    b.HasOne("FiktivSkolaEF.Models.staff", "Staff")
                        .WithMany("ConnectionTables")
                        .HasForeignKey("StaffId")
                        .IsRequired()
                        .HasConstraintName("FK_ConnectionTable_Staff");

                    b.HasOne("FiktivSkolaEF.Models.StaffPosition", "StaffPosition")
                        .WithMany("ConnectionTables")
                        .HasForeignKey("StaffPositionId")
                        .IsRequired()
                        .HasConstraintName("FK_ConnectionTable_StaffPosition");

                    b.HasOne("FiktivSkolaEF.Models.Student", "Student")
                        .WithMany("ConnectionTables")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_ConnectionTable_Student");

                    b.Navigation("DateGrade");

                    b.Navigation("Grade");

                    b.Navigation("Staff");

                    b.Navigation("StaffPosition");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.staff", b =>
                {
                    b.HasOne("FiktivSkolaEF.Models.StaffPosition", "Position")
                        .WithMany("staff")
                        .HasForeignKey("PositionId")
                        .HasConstraintName("FK_Staff_StaffPosition");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.DateGrade", b =>
                {
                    b.Navigation("ConnectionTables");
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.Grade", b =>
                {
                    b.Navigation("ConnectionTables");
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.staff", b =>
                {
                    b.Navigation("ConnectionTables");
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.StaffPosition", b =>
                {
                    b.Navigation("ConnectionTables");

                    b.Navigation("staff");
                });

            modelBuilder.Entity("FiktivSkolaEF.Models.Student", b =>
                {
                    b.Navigation("ConnectionTables");
                });
#pragma warning restore 612, 618
        }
    }
}
